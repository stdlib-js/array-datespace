{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isInteger from '@stdlib/assert-is-integer';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isObject from '@stdlib/assert-is-object';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport floor from '@stdlib/math-base-special-floor';\nimport round from '@stdlib/math-base-special-round';\nimport ceil from '@stdlib/math-base-special-ceil';\n\n\n// VARIABLES //\n\nvar timestamp = /^\\d{10}$|^\\d{13}$/;\nvar rounders = [ 'floor', 'ceil', 'round' ];\n\n\n// FUNCTIONS //\n\n/**\n* Validates a date parameter.\n*\n* @private\n* @param {*} value - value to be validated\n* @param {string} name - name to be used in error messages\n* @throws {TypeError} value must either be a date string, Date object, Unix timestamp, or JavaScript timestamp\n* @throws {Error} numeric date must be either a Unix or JavaScript timestamp\n* @returns {Date} validated date\n*/\nfunction validDate( value, name ) {\n\tvar type;\n\n\ttype = typeof value;\n\tif ( type === 'string' ) {\n\t\tvalue = Date.parse( value );\n\t\tif ( value !== value ) {\n\t\t\tthrow new Error( format( '00b2R,Ms', name.toLowerCase() ) );\n\t\t}\n\t\tvalue = new Date( value );\n\t}\n\tif ( type === 'number' ) {\n\t\tif ( !timestamp.test( value ) ) {\n\t\t\tthrow new Error( format( '00b2S,Mt', name.toLowerCase() ) );\n\t\t}\n\t\tif ( value.toString().length === 10 ) {\n\t\t\tvalue *= 1000; // sec to ms\n\t\t}\n\t\tvalue = new Date( value );\n\t}\n\tif ( !(value instanceof Date) ) {\n\t\tthrow new TypeError( format( '00b2T,Mu', name ) );\n\t}\n\treturn value;\n}\n\n\n// MAIN //\n\n/**\n* Generates an array of linearly spaced dates.\n*\n* @param {(Date|number|string)} start - start time as either a `Date` object, Unix timestamp, JavaScript timestamp, or date string\n* @param {(Date|number|string)} stop - stop time as either a `Date` object, Unix timestamp, JavaScript timestamp, or date string\n* @param {number} [length] - output array length (default: 100)\n* @param {Object} [options] - function options\n* @param {string} [options.round] - specifies how sub-millisecond times should be rounded: [ 'floor', 'ceil', 'round' ] (default: 'floor' )\n* @throws {TypeError} length argument must a positive integer\n* @throws {Error} must provide valid options\n* @returns {Array} array of dates\n*\n* @example\n* var stop = '2014-12-02T07:00:54.973Z';\n* var start = new Date( stop ) - 60000;\n*\n* var arr = datespace( start, stop, 6 );\n* // returns [...]\n*\n* @example\n* // Equivalent of Math.ceil():\n* var arr = datespace( 1417503655000, 1417503655001, 3, { 'round': 'ceil' } );\n* // returns [...]\n*\n* // Equivalent of Math.round():\n* arr = datespace( 1417503655000, 1417503655001, 3, { 'round': 'round' } );\n* // returns [...]\n*/\nfunction datespace( start, stop, length, options ) {\n\tvar opts;\n\tvar len;\n\tvar flg;\n\tvar arr;\n\tvar end;\n\tvar fcn;\n\tvar tmp;\n\tvar d;\n\tvar i;\n\n\tlen = 100;\n\tflg = true;\n\topts = {\n\t\t'round': 'floor'\n\t};\n\tstart = validDate( start, 'Start' );\n\tstop = validDate( stop, 'Stop' );\n\tif ( arguments.length > 2 ) {\n\t\tif ( arguments.length === 3 ) {\n\t\t\tif ( isObject( length ) ) {\n\t\t\t\topts = length;\n\t\t\t} else {\n\t\t\t\tlen = length;\n\n\t\t\t\t// Turn off checking the options object...\n\t\t\t\tflg = false;\n\t\t\t}\n\t\t} else {\n\t\t\topts = options;\n\t\t\tlen = length;\n\t\t}\n\t\tif ( len === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tif ( !isInteger( len ) || len < 0 ) {\n\t\t\tthrow new TypeError( format( '00b2U,Mv', len ) );\n\t\t}\n\t\tif ( flg ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '00b2V,FD', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'round' ) ) {\n\t\t\t\tif ( !isString( opts.round ) ) {\n\t\t\t\t\tthrow new TypeError( format( '00b2W,Gh', 'round', opts.round ) );\n\t\t\t\t}\n\t\t\t\tif ( rounders.indexOf( opts.round ) === -1 ) {\n\t\t\t\t\tthrow new Error( format( '00b2X,3g,4S,GD,Gg,Jm', 'round', rounders.join( '\", \"' ), opts.round ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tswitch ( opts.round ) {\n\tcase 'round':\n\t\tfcn = round;\n\t\tbreak;\n\tcase 'ceil':\n\t\tfcn = ceil;\n\t\tbreak;\n\tcase 'floor':\n\tdefault:\n\t\tfcn = floor;\n\t\tbreak;\n\t}\n\n\t// Calculate the increment...\n\tend = len - 1;\n\td = ( stop.getTime() - start.getTime() ) / end;\n\n\t// Build the output array...\n\tarr = new Array( len );\n\ttmp = start;\n\tarr[ 0 ] = tmp;\n\ttmp = tmp.getTime();\n\tfor ( i = 1; i < end; i++ ) {\n\t\ttmp += d;\n\t\tarr[ i ] = new Date( fcn( tmp ) );\n\t}\n\tarr[ end ] = stop;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default datespace;\n"],"names":["timestamp","rounders","validDate","value","name","type","Date","parse","Error","format","toLowerCase","test","toString","length","TypeError","datespace","start","stop","options","opts","len","flg","arr","end","fcn","tmp","d","i","round","arguments","isObject","isInteger","hasOwnProp","isString","indexOf","join","ceil","floor","getTime","Array"],"mappings":";;ywBAkCA,IAAIA,EAAY,oBACZC,EAAW,CAAE,QAAS,OAAQ,SAelC,SAASC,EAAWC,EAAOC,GAC1B,IAAIC,EAGJ,GAAc,YADdA,SAAcF,GACW,CAExB,IADAA,EAAQG,KAAKC,MAAOJ,KACLA,EACd,MAAM,IAAIK,MAAOC,EAAQ,WAAYL,EAAKM,gBAE3CP,EAAQ,IAAIG,KAAMH,EAClB,CACD,GAAc,WAATE,EAAoB,CACxB,IAAML,EAAUW,KAAMR,GACrB,MAAM,IAAIK,MAAOC,EAAQ,WAAYL,EAAKM,gBAEV,KAA5BP,EAAMS,WAAWC,SACrBV,GAAS,KAEVA,EAAQ,IAAIG,KAAMH,EAClB,CACD,KAAOA,aAAiBG,MACvB,MAAM,IAAIQ,UAAWL,EAAQ,WAAYL,IAE1C,OAAOD,CACR,CAiCA,SAASY,EAAWC,EAAOC,EAAMJ,EAAQK,GACxC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EASJ,GAPAP,EAAM,IACNC,GAAM,EACNF,EAAO,CACNS,MAAS,SAEVZ,EAAQd,EAAWc,EAAO,SAC1BC,EAAOf,EAAWe,EAAM,QACnBY,UAAUhB,OAAS,EAAI,CAc3B,GAb0B,IAArBgB,UAAUhB,OACTiB,EAAUjB,GACdM,EAAON,GAEPO,EAAMP,EAGNQ,GAAM,IAGPF,EAAOD,EACPE,EAAMP,GAEM,IAARO,EACJ,MAAO,GAER,IAAMW,EAAWX,IAASA,EAAM,EAC/B,MAAM,IAAIN,UAAWL,EAAQ,WAAYW,IAE1C,GAAKC,EAAM,CACV,IAAMS,EAAUX,GACf,MAAM,IAAIL,UAAWL,EAAQ,WAAYU,IAE1C,GAAKa,EAAYb,EAAM,SAAY,CAClC,IAAMc,EAAUd,EAAKS,OACpB,MAAM,IAAId,UAAWL,EAAQ,WAAY,QAASU,EAAKS,QAExD,IAAyC,IAApC3B,EAASiC,QAASf,EAAKS,OAC3B,MAAM,IAAIpB,MAAOC,EAAQ,uBAAwB,QAASR,EAASkC,KAAM,QAAUhB,EAAKS,OAEzF,CACD,CACD,CACD,OAAST,EAAKS,OACd,IAAK,QACJJ,EAAMI,EACN,MACD,IAAK,OACJJ,EAAMY,EACN,MAED,QACCZ,EAAMa,EAaP,IARAd,EAAMH,EAAM,EACZM,GAAMT,EAAKqB,UAAYtB,EAAMsB,WAAcf,EAI3CE,EAAMT,GADNM,EAAM,IAAIiB,MAAOnB,IAEZ,GAAMK,EACXA,EAAMA,EAAIa,UACJX,EAAI,EAAGA,EAAIJ,EAAKI,IACrBF,GAAOC,EACPJ,EAAKK,GAAM,IAAIrB,KAAMkB,EAAKC,IAG3B,OADAH,EAAKC,GAAQN,EACNK,CACR"}